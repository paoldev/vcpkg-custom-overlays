diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7971704..5e41740 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -79,7 +79,6 @@ if(MSVC)
     if(CMAKE_VERSION VERSION_LESS "3.15.0")
       message(FATAL_ERROR "Use CMake 3.15 or later when setting BUILD_SHARED_LIBS to OFF")
     endif()
-    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
   endif()
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /d2FH4-")
 else()
@@ -87,7 +86,7 @@ else()
 endif()
 
 find_package(Threads)
-add_subdirectory(third_party/spdlog EXCLUDE_FROM_ALL)
+find_package(spdlog REQUIRED)
 
 set(PRIVATE_INCLUDE_DIRECTORIES
   ${CMAKE_CURRENT_SOURCE_DIR}/src
@@ -216,12 +215,7 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(amd64)|(AMD64)")
   if(BUILD_SHARED_LIBS)
     set(CMAKE_POSITION_INDEPENDENT_CODE ON)
   endif()
-  set(BUILD_SHARED_LIBS_SAVED "${BUILD_SHARED_LIBS}")
-  set(BUILD_SHARED_LIBS OFF)
-  set(BUILD_TESTING OFF)
-  add_subdirectory(third_party/cpu_features EXCLUDE_FROM_ALL)
-  set(BUILD_SHARED_LIBS "${BUILD_SHARED_LIBS_SAVED}")
-  list(APPEND LIBRARIES cpu_features)
+  find_package(CpuFeatures REQUIRED)
 endif()
 
 if(ENABLE_CPU_DISPATCH)
@@ -299,9 +293,14 @@ if(WITH_MKL)
   else()
     message(FATAL_ERROR "MKL include directory not found")
   endif()
+  
+  set(MKL_LIB_SUFFIX "")
+  if(WIN32 AND "${CMAKE_MSVC_RUNTIME_LIBRARY}" STREQUAL "MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<STREQUAL:dynamic,dynamic>:DLL>")
+    set(MKL_LIB_SUFFIX "_dll")
+  endif()
 
   # Find MKL libraries.
-  find_library(MKL_CORE_LIBRARY NAMES mkl_core PATHS ${MKL_ROOT}/lib ${MKL_ROOT}/lib/intel64)
+  find_library(MKL_CORE_LIBRARY NAMES mkl_core${MKL_LIB_SUFFIX} PATHS ${MKL_ROOT}/lib ${MKL_ROOT}/lib/intel64)
   if(MKL_CORE_LIBRARY)
     get_filename_component(MKL_LIBRARY_DIR ${MKL_CORE_LIBRARY} DIRECTORY)
     message(STATUS "Found MKL library directory: ${MKL_LIBRARY_DIR}")
@@ -312,8 +311,8 @@ if(WITH_MKL)
   add_definitions(-DCT2_WITH_MKL -DMKL_ILP64)
   if(WIN32)
     set(MKL_LIBRARIES
-      ${MKL_LIBRARY_DIR}/mkl_core.lib
-      ${MKL_LIBRARY_DIR}/mkl_intel_ilp64.lib
+      ${MKL_LIBRARY_DIR}/mkl_core${MKL_LIB_SUFFIX}.lib
+      ${MKL_LIBRARY_DIR}/mkl_intel_ilp64${MKL_LIB_SUFFIX}.lib
       )
   else()
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
@@ -325,7 +324,7 @@ if(WITH_MKL)
 
   if(OPENMP_RUNTIME STREQUAL "INTEL")
     if(WIN32)
-      list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/mkl_intel_thread.lib)
+      list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/mkl_intel_thread${MKL_LIB_SUFFIX}.lib)
     else()
       list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/libmkl_intel_thread.a)
     endif()
@@ -337,7 +336,7 @@ if(WITH_MKL)
     endif()
   elseif(OPENMP_RUNTIME STREQUAL "NONE")
     if(WIN32)
-      list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/mkl_sequential.lib)
+      list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/mkl_sequential${MKL_LIB_SUFFIX}.lib)
     else()
       list(APPEND MKL_LIBRARIES ${MKL_LIBRARY_DIR}/libmkl_sequential.a)
     endif()
@@ -385,7 +384,7 @@ if (WITH_ACCELERATE)
 endif()
 
 if (WITH_OPENBLAS)
-  find_path(OPENBLAS_INCLUDE_DIR NAMES cblas.h)
+  find_path(OPENBLAS_INCLUDE_DIR NAMES cblas.h PATH_SUFFIXES openblas)
   if(OPENBLAS_INCLUDE_DIR)
     message(STATUS "Found OpenBLAS include directory: ${OPENBLAS_INCLUDE_DIR}")
   else()
@@ -406,10 +405,7 @@ endif()
 
 if (WITH_RUY)
   add_definitions(-DCT2_WITH_RUY)
-  set(CMAKE_POSITION_INDEPENDENT_CODE ON)
-  set(CPUINFO_LIBRARY_TYPE static CACHE STRING "cpuinfo library type")
-  add_subdirectory(third_party/ruy EXCLUDE_FROM_ALL)
-  unset(CMAKE_POSITION_INDEPENDENT_CODE)
+  find_package(ruy REQUIRED)
   list(APPEND LIBRARIES ruy)
 endif()
 
@@ -417,7 +413,7 @@ if (WITH_CUDA)
   find_package(CUDA 11.0 REQUIRED)
   add_definitions(-DCT2_WITH_CUDA)
   if(MSVC)
-    if(BUILD_SHARED_LIBS)
+    if(BUILD_SHARED_LIBS OR "${CMAKE_MSVC_RUNTIME_LIBRARY}" STREQUAL "MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<STREQUAL:dynamic,dynamic>:DLL>")
       list(APPEND CUDA_NVCC_FLAGS "-Xcompiler=/MD$<$<CONFIG:Debug>:d>")
     else()
       list(APPEND CUDA_NVCC_FLAGS "-Xcompiler=/MT$<$<CONFIG:Debug>:d>")
@@ -525,6 +521,10 @@ else()
   add_library(${PROJECT_NAME} ${SOURCES})
 endif()
 
+if (CpuFeatures_FOUND)
+  target_link_libraries(${PROJECT_NAME} PRIVATE CpuFeatures::cpu_features)
+endif()
+
 include(GenerateExportHeader)
 generate_export_header(${PROJECT_NAME})
 set_property(TARGET ${PROJECT_NAME} PROPERTY VERSION ${CTRANSLATE2_VERSION})
