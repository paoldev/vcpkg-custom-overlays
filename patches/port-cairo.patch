diff --git a/my-optional-win32-feature.patch b/my-optional-win32-feature.patch
new file mode 100644
index 0000000..b6b4076
--- /dev/null
+++ b/my-optional-win32-feature.patch
@@ -0,0 +1,55 @@
+diff --git a/meson.build b/meson.build
+index 4051a7c..2892671 100644
+--- a/meson.build
++++ b/meson.build
+@@ -482,7 +482,23 @@ if host_machine.system() == 'darwin' and not get_option('quartz').disabled()
+   endif
+ endif
+ 
+-if host_machine.system() == 'windows'
++# When compiling cairo dll for 'windows' without 'win32' stuff (such as when compiling for UWP),
++# win32 mutex initialization is still required (see 'cairo-win32-system.c').
++if host_machine.system() == 'windows' and get_option('win32').disabled()
++  add_project_arguments('-DWIN32_LEAN_AND_MEAN', '-DNOMINMAX', language: ['c', 'cpp'])
++  if cc.get_define('WINAPI_FAMILY') == 'WINAPI_FAMILY_APP' or cc.get_define('WINAPI_FAMILY') == 'WINAPI_FAMILY_PC_APP' or cc.get_define('WINAPI_FAMILY') == '2'
++    add_project_arguments('-DWINVER=_WIN32_WINNT_WIN10', '-D_WIN32_WINNT=_WIN32_WINNT_WIN10', '-DNTDDI_VERSION=NTDDI_WIN10_RS3', language: ['c', 'cpp'])
++  else
++    add_project_arguments('-DWINVER=_WIN32_WINNT_WIN2K', '-D_WIN32_WINNT=_WIN32_WINNT_WIN2K', language: ['c', 'cpp'])
++  endif
++
++  built_features += [
++    {
++      'name': 'cairo-win32-system-only',
++      'description': 'Microsoft Windows library initialization',
++    }
++  ]
++elif host_machine.system() == 'windows'
+   add_languages('cpp')
+ 
+   add_project_arguments('-DWIN32_LEAN_AND_MEAN', '-DNOMINMAX', language: ['c', 'cpp'])
+diff --git a/meson_options.txt b/meson_options.txt
+index f481ef3..56e5128 100644
+--- a/meson_options.txt
++++ b/meson_options.txt
+@@ -7,6 +7,7 @@ option('freetype', type : 'feature', value : 'auto')
+ option('png', type : 'feature', value : 'auto') # png and svg surfaces
+ option('quartz', type : 'feature', value : 'auto')
+ option('tee', type : 'feature', value : 'auto')
++option('win32', type : 'feature', value : 'auto')
+ option('xcb', type : 'feature', value : 'auto')
+ option('xlib', type : 'feature', value : 'auto')
+ option('xlib-xcb', type : 'feature', value : 'disabled')
+diff --git a/src/meson.build b/src/meson.build
+index ac06ac6..15f9ca6 100644
+--- a/src/meson.build
++++ b/src/meson.build
+@@ -182,6 +182,9 @@ cairo_feature_sources = {
+   'cairo-dwrite-font': [
+     'win32/cairo-dwrite-font.cpp',
+   ],
++  'cairo-win32-system-only': [
++    'win32/cairo-win32-system.c',
++  ],
+   'cairo-script': [
+     'cairo-script-surface.c',
+   ],
diff --git a/portfile.cmake b/portfile.cmake
index e7101c2..e561356 100644
--- a/portfile.cmake
+++ b/portfile.cmake
@@ -14,9 +14,17 @@ vcpkg_from_gitlab(
     PATCHES
         cairo_add_lzo_feature_option.patch
         msvc-convenience.diff
+        my-optional-win32-feature.patch  #my-change: it MUST be applied before 'fix_clang-cl_build.patch'
         ${EXTRA_PATCHES}
 )
 
+#my-change begin
+if(VCPKG_TARGET_IS_UWP)
+    #disable gdi and dwrite stuff: feature added by 'my-optional-win32-feature.patch'
+    list(APPEND OPTIONS -Dwin32=disabled)
+endif()
+#my-change end
+
 if("fontconfig" IN_LIST FEATURES)
     list(APPEND OPTIONS -Dfontconfig=enabled)
 else()
diff --git a/vcpkg.json b/vcpkg.json
index 53d118e..7f8a1a7 100644
--- a/vcpkg.json
+++ b/vcpkg.json
@@ -5,7 +5,7 @@
   "description": "Cairo is a 2D graphics library with support for multiple output devices. Currently supported output targets include the X Window System (via both Xlib and XCB), Quartz, Win32, image buffers, PostScript, PDF, and SVG file output. Experimental backends include OpenGL, BeOS, OS/2, and DirectFB.",
   "homepage": "https://cairographics.org",
   "license": "LGPL-2.1-only OR MPL-1.1",
-  "supports": "!xbox & !uwp",
+  "supports": "!xbox",
   "dependencies": [
     "dirent",
     "expat",
@@ -19,12 +19,16 @@
     "zlib"
   ],
   "default-features": [
-    "fontconfig",
+    {
+      "name": "fontconfig",
+      "platform": "!uwp"
+    },
     "freetype"
   ],
   "features": {
     "fontconfig": {
       "description": "Build with fontconfig",
+      "supports": "!uwp",
       "dependencies": [
         "fontconfig"
       ]
